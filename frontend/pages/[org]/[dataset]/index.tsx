import { GetServerSideProps } from "next";
import Head from "next/head";
import { CKAN } from "@portaljs/ckan";
import { getDataset } from "@/lib/queries/dataset";
import { Dataset } from "@/schemas/dataset.interface";
import {
  getTypeIcon,
  getTypeBadgeClass,
  getTypeIconBgColor,
  getFormatBadge,
  formatDate,
} from "@/lib/uiUtils";

interface DatasetPageProps {
  dataset: Dataset;
}

export const getServerSideProps: GetServerSideProps<DatasetPageProps> = async (
  context
) => {
  try {
    const ckan = new CKAN(process.env.NEXT_PUBLIC_CKAN_URL);
    const datasetName = context.params?.dataset as string;
    let dataset = await getDataset({ name: datasetName as string });
    if (!dataset) {
      return {
        notFound: true,
      };
    }
    const activityStream = await ckan.getDatasetActivityStream(dataset.name);
    dataset = {
      ...dataset,
      activity_stream: activityStream,
    };
    return {
      props: {
        dataset,
      },
    };
  } catch (e) {
    console.error(e);
    return {
      notFound: true,
    };
  }
};

//export default function DatasetPage({ dataset }): JSX.Element {
//  const tabs = [
//    {
//      id: "resources",
//      content: (
//        <ResourcesList
//          resources={dataset?.resources}
//          orgName={dataset.organization ? dataset.organization.name : ""}
//          datasetName={dataset.name}
//        />
//      ),
//      title: "Resources",
//    },
//    {
//      id: "information",
//      content: <DatasetOverview dataset={dataset} />,
//      title: "Info",
//    },
//    {
//      id: "activity-stream",
//      content: (
//        <ActivityStream
//          activities={dataset?.activity_stream ? dataset.activity_stream : []}
//        />
//      ),
//      title: "Activity Stream",
//    },
//  ];
//  return (
//    <>
//      <Head>
//        <title>{`${dataset.title || dataset.name} - Dataset`}</title>
//        <meta name="description" content="Generated by create next app" />
//        <link rel="icon" href="/favicon.ico" />
//      </Head>
//      <Layout>
//        <HeroSection title={dataset.title} cols="6" />
//        <DatasetNavCrumbs
//          org={{
//            name: dataset.organization?.name,
//            title: dataset.organization?.title,
//          }}
//          dataset={{
//            name: dataset.name,
//            title: dataset.title ? dataset.title : "This dataset",
//          }}
//        />
//        <div className="grid grid-rows-datasetpage-hero mt-8">
//          <section className="grid row-start-2 row-span-2 col-span-full">
//            <div className="custom-container">
//              {dataset && (
//                <main className={styles.main}>
//                  <DatasetInfo dataset={dataset} />
//                  <div>
//                    <Tabs items={tabs} />
//                  </div>
//                </main>
//              )}
//            </div>
//          </section>
//        </div>
//      </Layout>
//    </>
//  );
//}
import type React from "react";
import { Clock, Download } from "lucide-react";
import { ArrowPathIcon, HashtagIcon } from "@heroicons/react/24/outline";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import NavBar from "@/components/_shared/NavBar";
import { Footer } from "@/components/_shared/Footer";
import { Fragment } from "react";

export default function DatasetPage({ dataset }: DatasetPageProps) {
  return (
    <div className="">
      <Head>
        <title>City of Ann Arbor Open Data Portal</title>
        <meta name="description" content="City of Ann Arbor Open Data Portal" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="lg:min-h-screen bg-gradient-to-b from-[#E2F1E4] to-[#FFFFFF] to-10%">
        <NavBar />
        <div className="lg:absolute lg:top-36 lg:left-0 w-full h-[222px] lg:bg-[url('/images/bg-image.png')] bg-contain"></div>
        <div className="lg:pt-36 relative z-10">
          <MainContent dataset={dataset} />
        </div>
      </div>
      <div className="space-y-2 mt-4">
        <Footer />
      </div>
    </div>
  );
}

function MainContent({ dataset }: { dataset: Dataset }) {
  return (
    <main className="flex-grow container mx-auto px-4 sm:px-6 lg:px-8 py-8 z-20">
      <div className="flex flex-col gap-y-4 w-full">
        <div className="w-full bg-white p-6 sm:p-8 lg:px-12 rounded-lg shadow-lg">
          <Breadcrumbs dataset={dataset} />
          <TitleSection dataset={dataset} />
        </div>
        <div className="bg-white">
          <TabsSection />
        </div>
      </div>
    </main>
  );
}

function Breadcrumbs({ dataset }: { dataset: Dataset }) {
  return (
    <Breadcrumb className="mb-4">
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink
            href="/"
            className="text-ann-arbor-primary-blue hover:underline"
          >
            Home
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink
            href="/search"
            className="text-ann-arbor-primary-blue hover:underline"
          >
            Data
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage className="text-ann-arbor-primary-blue">
            {dataset.title || dataset.name}
          </BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  );
}

function TitleSection({ dataset }: { dataset: Dataset }) {
  return (
    <div className="mb-6">
      <div className="flex flex-col sm:flex-row items-start gap-4">
        <div className="flex-1">
          <div className="flex flex-col md:flex-row sm:items-start gap-x-2 mb-1">
            <h1 className="leading-tight text-black text-3xl font-bold">
              {dataset.title || dataset.name}
            </h1>
            <Badge
              variant="outline"
              className={`w-fit text-[#3f3f3f] mt-1 text-sm font-normal border-0 ${getTypeBadgeClass(
                dataset.type || "dataset"
              )}`}
            >
              {dataset.type || "dataset"}
            </Badge>
          </div>
          <p className="text-sm font-normal text-black mb-3 mt-2">
            {dataset.notes}
          </p>
          <div className="flex flex-wrap items-center gap-x-3 gap-y-1 text-sm font-normal text-black mb-3">
            {dataset.metadata_created && (
              <div className="flex items-center gap-1.5">
                <Clock className="w-4 h-4 mb-0.5" />
                Created {formatDate(dataset.metadata_created)}
              </div>
            )}
            {dataset.metadata_modified && (
              <div className="flex items-center gap-1">
                <ArrowPathIcon className="w-4 h-4 mb-0.5" />
                Updated {formatDate(dataset.metadata_modified)}
              </div>
            )}
            {dataset.tags && dataset.tags.length > 0 && (
              <div className="flex items-center gap-1">
                <HashtagIcon className="w-4 h-4 mb-0.5" />
                {dataset.tags
                  .slice(0, 3)
                  .map((tag) => tag.display_name)
                  .join(", ")}
                {dataset.tags.length > 3 && "..."}
              </div>
            )}
          </div>
          <div className="flex flex-wrap items-center gap-2">
            {dataset.resources.map((resource) => (
              <Fragment key={resource.id}>
                {getFormatBadge(resource.format)}
              </Fragment>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

function TabsSection() {
  return (
    <Tabs defaultValue="overview" className="w-full">
      <TabsList className="grid w-full grid-cols-2 sm:grid-cols-4 bg-city-gray-light p-1 rounded-md mb-0">
        <TabsTrigger
          value="resources"
          className="data-[state=active]:bg-white data-[state=active]:text-city-green-dark data-[state=active]:shadow-sm data-[state=active]:border-b-2 data-[state=active]:border-city-green-dark rounded-none"
        >
          Resources
        </TabsTrigger>
        <TabsTrigger
          value="overview"
          className="data-[state=active]:bg-white data-[state=active]:text-city-green-dark data-[state=active]:shadow-sm data-[state=active]:border-b-2 data-[state=active]:border-city-green-dark rounded-none"
        >
          Overview
        </TabsTrigger>
        <TabsTrigger
          value="api"
          className="data-[state=active]:bg-white data-[state=active]:text-city-green-dark data-[state=active]:shadow-sm data-[state=active]:border-b-2 data-[state=active]:border-city-green-dark rounded-none"
        >
          API Documentation
        </TabsTrigger>
      </TabsList>
      <TabsContent
        value="resources"
        className="bg-white p-6 border border-t-0 border-city-gray-light rounded-b-md"
      >
        <p className="text-city-gray-text">Resources content goes here.</p>
      </TabsContent>
      <TabsContent
        value="overview"
        className="bg-white p-12 border border-t-0 border-city-gray-light rounded-b-md"
      >
        <OverviewContent />
      </TabsContent>
      <TabsContent
        value="api"
        className="bg-white p-6 border border-t-0 border-city-gray-light rounded-b-md"
      >
        <p className="text-city-gray-text">
          API Documentation content goes here.
        </p>
      </TabsContent>
    </Tabs>
  );
}

function OverviewContent() {
  const detailItem = (label: string, value: string | React.ReactNode) => (
    <div className="mb-4">
      <h3 className="text-base font-medium mb-1">{label}</h3>
      {typeof value === "string" ? (
        <p className="text-gray-500 text-sm">{value}</p>
      ) : (
        value
      )}
    </div>
  );

  return (
    <div>
      <div className="mb-6 flex gap-x-2 items-center">
        <h2 className="text-base font-normal text-ann-arbor-primary-blue mb-2">
          Export metadata in
        </h2>
        <div className="flex space-x-4 mb-2 text-base font-normal">
          <Button
            variant="link"
            className="p-0 h-auto hover:underline font-normal"
          >
            <Download size={16} className="text-ann-arbor-primary-blue" /> RDF
          </Button>
          <Button
            variant="link"
            className="p-0 h-auto hover:underline font-normal"
          >
            <Download size={16} className="text-ann-arbor-primary-blue" /> TTL
            TTL
          </Button>
          <Button
            variant="link"
            className="p-0 h-auto hover:underline font-normal"
          >
            <Download size={16} className="text-ann-arbor-primary-blue" />
            JSON-LD
          </Button>
        </div>
      </div>

      {detailItem(
        "Stakeholders",
        "At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident."
      )}

      <div className="mb-4">
        <h3 className="text-base font-medium mb-1">Sources</h3>
        <ul className="list-disc list-inside text-sm">
          <li>
            <a href="#" className="text-ann-arbor-primary-blue hover:underline">
              American Transport Outlook (ATO)
            </a>
          </li>
          <li>
            <a href="#" className="text-ann-arbor-primary-blue hover:underline">
              Integrated Database of the American Energy System (JRC-IDEES)
            </a>
          </li>
        </ul>
      </div>

      {detailItem("Last updated date", "23 March, 2023")}
      {detailItem("Version", "1.0")}
      {detailItem("Temporal Coverage", "01 January 1990 - 31 December 2022")}
      {detailItem("Coverage type", "National")}
      {detailItem("Data type", "Count")}
      {detailItem("Visibility", "Public")}
      {detailItem(
        "License",
        <a
          href="#"
          className="text-ann-arbor-primary-blue hover:underline text-sm"
        >
          Open Data Commons Attribution License
        </a>
      )}
    </div>
  );
}
